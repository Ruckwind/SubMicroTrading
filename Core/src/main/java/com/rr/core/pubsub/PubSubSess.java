package com.rr.core.pubsub;

import java.io.Closeable;

/**
 * a non threadsafe Session to be used on single thread
 * <p>
 * topic format
 * <p>
 * ${ENV}.${streamName}....
 * <p>
 * ${ENV}.${streamName}.*    means all topics on a stream
 * <p>
 * All topic names should be generated by using PubSubUtils  to ensure consistency
 * <p>
 * It would take ALOT of work to build a completely agnostic layer around the many different JMS implementations
 * <p>
 * NATS Streaming uses seq numbers and timestamps PER topic, does not support streams, doesnt work reliably with seq numbers
 * has no dead letter handling
 * does not auto reconnect
 * does not auto resubscribe on reconnect
 * does not auto replay messages that failed to publish
 * wild cards do not work
 * response inbox does not work
 * NATS JetStream uses seq numbers WITHIN stream, consumer needs to be setup PER stream NOT per topic
 * JetStream supports push (server controls sequencing) or pull subscription
 * response inbox works
 * all topics within a stream are multiplexed within the stream
 * wildcards for topics work
 * KAFKA uses seq numbers within topic, does not use Streams (well didnt 8 years ago when I last looked !
 * <p>
 * Targetting JetStream as thats what we will use
 */
public interface PubSubSess extends Closeable {

    /**
     * Subscription Callback
     *
     * @param <C>
     * @param <M>
     */
    interface Callback<C, M> {

        void onMsg( String topic, C context, M data, long timeStampNano, long seqNum, String replyTopic );
    }

    /**
     * async send
     *
     * @param topic
     * @param msg
     */
    void asyncPublish( String topic, Object msg );

    /**
     * session enables session for stream and allows subscriptions on topics in that stream
     *
     * @param stream
     * @param topic
     */
    void stream( MsgStream stream );

    /**
     * subscribe to topic using requested subscription options
     *
     * @param subscriberId
     * @param topic
     * @param context
     * @param callback
     * @param <C>
     * @param <M>
     * @throws SMTRuntimeException various, including IO, requested options not available
     */
    <C, M> Subscription subscribe( String subscriberId, String topic, C context, PubSubSess.Callback<C, M> callback, SubscribeOptions opts );

    /**
     * @param topic
     * @param msg
     * @param replyTopic - reply topic ... MAY OR MAAY NOT BE IMPLEMENTED .. eg NAT Streaming doesnt support YET
     * @throws Exception
     */
    void syncPublish( String topic, Object msg, String replyTopic ) throws Exception;

    /**
     * reply topic will be the default inbox
     * <p>
     * blocking publish
     *
     * @param topic
     * @param msg
     */
    void syncPublish( String topic, Object msg );
}
