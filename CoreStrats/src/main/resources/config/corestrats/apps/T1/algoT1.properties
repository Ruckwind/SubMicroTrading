# PROPERTIES
# components can only reference other components defined before them
# app must be run with -Dapp.propertyTags=com.rr.core.algo.base.StratProps
#
# format for COMPONENT property identifiers is 
# component.{componentId}.[className|loader]  
# component.{componentId}.properties.{propertyName}
# where componentId and propertyName must be a single string with no periods  
# ie  c1.properties.p1.p2=XX is invalid
#
# example of arguments for constructor, default type is String
# type can be   ref|long|int|string|zstring|double|[className]
# for type "ref" the value is a componentID
# arguments index must start at 1 and match constructor arg .. arg0 is reserved for the componentId
#    component.componentId2.arg.1.value=./data/corestrats/cme/secdef.t1.dat
#    component.componentId2.arg.2.type=int
#    component.componentId2.arg.2.value=99
#
# example for argument as array of specified type
#    component.bookSrcMgr.arg.1.type=[Lcom.rr.md.book.BookSource;
#    component.bookSrcMgr.arg.1.value=mdController1, mdController2
#
# remember references will autowire assuming the componentId matches the reference in the SMTComponent/SMTLoader

app.name=Algo_T1
app.debug=false
app.genIdPrefix=C
app.genNumIdPrefix=12
app.REC=2

admin.jmx.html.port=8100

# expectedOrders is used to presize pools and calculate size of persistence files page sizes
run.cpuMaskFile=${ALGO_CPU_MASKS}
run.warmUpCount=${WARMCOUNT}
run.forceRemovePersistence=false

run.warmUpPortOffset=20

run.mainPriority=Main

warmup.delay=${WARMDELAY}

# =================================================================================
# MAPS
# map.{mapId}.keyType={className}
# map.{mapId}.valType={className}
# map.{mapId}.entry.{idx}={key}|{value}

map.algoClass.entry.1=T1|com.rr.core.algo.t1.AlgoT1

map.stratClass.entry.1=T1|com.rr.core.algo.t1.StrategyT1

# ---------------------------------------------------------------------------------
# Core Trading

source config/corestrats/components/commonTradingComponents.properties


# ---------------------------------------------------------------------------------
# Shared Components that dont belong in AppContext

# define the router to the exchange session that will route back to indiv strat handlers
# routerSharedData holds the route back for execs to appropriate algo exchange handler instance
component.routerSharedData.className=com.rr.core.algo.router.RouterSharedData
component.routerSharedData.arg.1.type=int
component.routerSharedData.arg.1.value=${EXPECTED_ORDERS}

# ---------------------------------------------------------------------------------
# HUB SESSION

source config/corestrats/component/asyncLogHubSession.properties


# ---------------------------------------------------------------------------------
# EXCHANGE SESSIONS

component.inboundMktRouter.className=com.rr.core.algo.router.MultiSourceFromExchangeRouter
component.inboundMktRouter.arg.1.type=com.rr.core.model.MessageHandler
component.inboundMktRouter.arg.1.ref=hubSession1
component.inboundMktRouter.arg.2.ref=routerSharedData


# OUTBOUND TRADING SESSION (currently 1 control thread shared used for SEND and RECEIVE
# remember the send/receivers can use different thread controllers

component.threadExchange.className=com.rr.core.thread.DualElementControlThread
component.threadExchange.arg.1.type=com.rr.core.utils.ThreadPriority
component.threadExchange.arg.1.value=SessionOutbound2

component.exchangeReceiver1.className=com.rr.core.session.MultiSessionThreadedReceiver
component.exchangeReceiver1.arg.1.type=com.rr.core.thread.ControlThread
component.exchangeReceiver1.arg.1.ref=threadExchange

component.exchangeSender1.className=com.rr.core.session.MultiSessionThreadedDispatcher
component.exchangeSender1.arg.1.type=com.rr.core.thread.ControlThread
component.exchangeSender1.arg.1.ref=threadExchange

component.exSess1Config.className=com.rr.om.session.fixsocket.FixSocketConfig
component.exSess1Config.properties.defaultProperties=session.socket.down.default
component.exSess1Config.properties.recycler=com.rr.model.generated.internal.events.factory.EventRecycler
component.exSess1Config.properties.maxMsgsPerSecond=${THROTTLE_EXCHANGE_MSGS_PER_SECOND}
component.exSess1Config.properties.maxResendRequestSize=2500
component.exSess1Config.properties.throttlerClass=com.rr.om.utils.OMThrottler
component.exSess1Config.properties.targetCompId=CME
component.exSess1Config.properties.encryptMethod=0
component.exSess1Config.properties.senderLocationID=${CME_SENDER_LOCATION_ID}
component.exSess1Config.properties.senderSubId=${CME_SENDER_SUBID}
component.exSess1Config.properties.targetSubId=${CME_TARGET_SUBID}
component.exSess1Config.properties.hostname=${CME_HOST}
component.exSess1Config.properties.isGapFillAllowed=true
component.exSess1Config.properties.disconnectOnSeqGap=false
component.exSess1Config.properties.senderCompId=${CME_SENDER_COMPID}
component.exSess1Config.properties.rawData=${CME_RAW_DATA}
component.exSess1Config.properties.port=${CME_PORT}
component.exSess1Config.properties.localPort=0
component.exSess1Config.properties.nic=${OM_EXCHANGE_NIC}

component.exOutQueue1.loader=com.rr.om.loaders.QueueLoader
component.exOutQueue1.properties.defaultProperties=queue.default
component.exOutQueue1.properties.type=${EX_OUT_QUEUE_TYPE}
component.exOutQueue1.properties.queuePresize=${EX_OUT_RING_BUFFER_DEFAULT_QUEUE_SIZE}

component.exchangeSession1.loader=com.rr.om.loaders.MultiFixSessionLoader
component.exchangeSession1.properties.expectedOrders=${EXPECTED_ORDERS}
component.exchangeSession1.properties.exchangeManager=exchangeManager
component.exchangeSession1.properties.sessionConfig=exSess1Config
component.exchangeSession1.properties.codecId=CME
component.exchangeSession1.properties.rec=2
component.exchangeSession1.properties.hubSession=hubSession1
component.exchangeSession1.properties.inboundRouter=inboundMktRouter
component.exchangeSession1.properties.sessionManager=sessionManager
component.exchangeSession1.properties.inboundDispatcher=exchangeReceiver1
component.exchangeSession1.properties.outboundDispatcher=exchangeSender1
component.exchangeSession1.properties.queue=exOutQueue1


# router used by algos to send orders to exchange
component.exchangeRouter.className=com.rr.core.algo.router.MultiSourceToSingleExchangeRouter
component.exchangeRouter.arg.1.type=com.rr.core.model.MessageHandler
component.exchangeRouter.arg.1.ref=exchangeSession1
component.exchangeRouter.arg.2.ref=routerSharedData


# ---------------------------------------------------------------------------------

# This application uses MultiSession components where sessions share/multiplex the thread of control 

# PipeIds can be used to form logical pipes
# eg four logical pipes split vertically across 4 market data sessions, but only across 2 market data controllers
# algo instances must which pipe they wish to use .... or use round robin
 
# Session1Receiver P1
# Session1Receiver P2
# Session1Receiver P3
# Session1Receiver P4
# MdCtrl1  P1,P2
# MdCtrl2  P3,P4


######################
# MD SESSION THREADS #
######################
 
# INBOUND (Market Data .. so no outbound dispatcher)
component.threadMktData1.className=com.rr.core.thread.SingleElementControlThread
component.threadMktData1.arg.1.type=com.rr.core.utils.ThreadPriority 
component.threadMktData1.arg.1.value=DataIn1

component.mktDataReceiver1.className=com.rr.core.session.MultiSessionThreadedReceiver
component.mktDataReceiver1.arg.1.type=com.rr.core.thread.ControlThread 
component.mktDataReceiver1.arg.1.value=threadMktData1
component.mktDataReceiver1.arg.2.value=P1,P3,P5,P7

component.threadMktData2.className=com.rr.core.thread.SingleElementControlThread
component.threadMktData2.arg.1.type=com.rr.core.utils.ThreadPriority 
component.threadMktData2.arg.1.value=DataIn2

component.mktDataReceiver2.className=com.rr.core.session.MultiSessionThreadedReceiver
component.mktDataReceiver2.arg.1.type=com.rr.core.thread.ControlThread 
component.mktDataReceiver2.arg.1.value=threadMktData2
component.mktDataReceiver2.arg.2.value=P2,P4,P6,P8

######################
# MD SESSION BUILDER #
######################

component.baseMDSocketConfig.className=com.rr.md.fastfix.FastSocketConfig
component.baseMDSocketConfig.properties.defaultProperties=session.socket.up.default
component.baseMDSocketConfig.properties.recycler=com.rr.model.generated.internal.events.factory.EventRecycler
component.baseMDSocketConfig.properties.localPort=0

component.mdSessBuilder.className=com.rr.md.us.cme.builder.CMEOnDemandFastFixSessionBuilder
component.mdSessBuilder.arg.1.ref=cmeConfig
component.mdSessBuilder.arg.2.ref=sessionManager
component.mdSessBuilder.arg.3.type=[Lcom.rr.core.session.MultiSessionThreadedReceiver;
component.mdSessBuilder.arg.3.value=mktDataReceiver1, mktDataReceiver2
component.mdSessBuilder.arg.4.type=com.rr.core.session.socket.SocketConfig
component.mdSessBuilder.arg.4.ref=baseMDSocketConfig
component.mdSessBuilder.arg.5.value=${OM_MD_NIC_A}, ${OM_MD_NIC_A}
component.mdSessBuilder.properties.addInstrumentSessions=false
component.mdSessBuilder.properties.addSnapshotSessions=false
component.mdSessBuilder.properties.trace=true
component.mdSessBuilder.properties.enableEventPojoLogging=true
component.mdSessBuilder.properties.subChannelMask=-1
component.mdSessBuilder.properties.templateFile=data/corestrats/cme/templates.xml


###################
# MD Controller 1 #
###################

# MarketDataController 
# market data events placed in market data controller queue
# queue is read and events invoked on the market data controller by its inbound dispatcher (which will be async on its own thread)
component.mdCtlInQueue1.loader=com.rr.om.loaders.QueueLoader
component.mdCtlInQueue1.properties.defaultProperties=queue.mdIn.default

component.mdInDispatcher1.className=com.rr.core.dispatch.OrigThreadedDispatcher
component.mdInDispatcher1.arg.1.type=com.rr.core.collections.MessageQueue
component.mdInDispatcher1.arg.1.value=mdCtlInQueue1
component.mdInDispatcher1.arg.2.type=com.rr.core.utils.ThreadPriority
component.mdInDispatcher1.arg.2.value=Controller1

component.mdController1.loader=com.rr.core.algo.loaders.CMEMarketDataControllerLoader
component.mdController1.properties.pipeIdList=P1,P2,P3,P4
component.mdController1.properties.bookLevels=5
component.mdController1.properties.inboundDispatcher=mdInDispatcher1
component.mdController1.properties.instrumentStore=instrumentLocator
component.mdController1.properties.rec=${app.REC}

###################
# MD Controller 2 #
###################
 
component.mdCtlInQueue2.loader=com.rr.om.loaders.QueueLoader
component.mdCtlInQueue2.properties.defaultProperties=queue.mdIn.default

component.mdInDispatcher2.className=com.rr.core.dispatch.OrigThreadedDispatcher
component.mdInDispatcher2.arg.1.type=com.rr.core.collections.MessageQueue
component.mdInDispatcher2.arg.1.value=mdCtlInQueue2
component.mdInDispatcher2.arg.2.type=com.rr.core.utils.ThreadPriority
component.mdInDispatcher2.arg.2.value=Controller2

component.mdController2.loader=com.rr.core.algo.loaders.CMEMarketDataControllerLoader
component.mdController2.properties.pipeIdList=P5,P6,P7,P8
component.mdController2.properties.bookLevels=5
component.mdController2.properties.inboundDispatcher=mdInDispatcher2
component.mdController2.properties.instrumentStore=instrumentLocator
component.mdController2.properties.rec=${app.REC}


#######################
# BOOK SOURCE MANAGER #
#######################

# BookSourceManager takes comma delimited list for constructor arg1 .. note type first char is '[' denotes array
component.bookSrcMgr.className=com.rr.md.book.BookSourceManager
component.bookSrcMgr.arg.1.type=[Lcom.rr.md.book.BookSource;
component.bookSrcMgr.arg.1.value=mdController1, mdController2
component.bookSrcMgr.properties.mdSessionBuilder=mdSessBuilder


# ---------------------------------------------------------------------------------
# ALGO instances

component.algoThread1.className=com.rr.core.thread.SingleElementControlThread
component.algoThread1.arg.1.type=com.rr.core.utils.ThreadPriority 
component.algoThread1.arg.1.value=Algo1

component.algoMultiplexor1.className=${PIPELINE_MULTIPLEXOR}
component.algoMultiplexor1.arg.1.type=com.rr.core.thread.ControlThread 
component.algoMultiplexor1.arg.1.ref=algoThread1
component.algoMultiplexor1.properties.pipeIdList=P1,P2,P3,P4

component.algoThread2.className=com.rr.core.thread.SingleElementControlThread
component.algoThread2.arg.1.type=com.rr.core.utils.ThreadPriority 
component.algoThread2.arg.1.value=Algo2

component.algoMultiplexor2.className=${PIPELINE_MULTIPLEXOR}
component.algoMultiplexor2.arg.1.type=com.rr.core.thread.ControlThread 
component.algoMultiplexor2.arg.1.ref=algoThread2
component.algoMultiplexor2.properties.pipeIdList=P5,P6,P7,P8

component.algoMgr.loader=com.rr.core.algo.loaders.StrategyMgrLoader
component.algoMgr.properties.account=defAct
component.algoMgr.properties.exchangeRouter=exchangeRouter
component.algoMgr.properties.algoClassNames=map.algoClass
component.algoMgr.properties.hubSession=hubSession1
component.algoMgr.properties.stratClassNames=map.stratClass
component.algoMgr.properties.strategyDefFile=./config/corestrats/cme/StratDef_T1.txt
component.algoMgr.properties.instrumentLocator=instrumentLocator
component.algoMgr.properties.multiplexors=algoMultiplexor1, algoMultiplexor2

# ---------------------------------------------------------------------------------
# RECONCILIATION - performed in prepare ... requires all sessions to be registered

component.reconciler.className=com.rr.om.recovery.DummyRecoveryController

component.reconcileRunner.className=com.rr.om.recovery.RecoveryRunner
component.reconcileRunner.properties.reconciler=reconciler
component.reconcileRunner.properties.sessionManager=sessionManager


# ---------------------------------------------------------------------------------
# SHARED CONTEXT
# Last component due to reference requirements

source config/corestrats/component/coreStratContext.properties


