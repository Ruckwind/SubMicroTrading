    private long _timestampMS;
    private ExchangeCode _securityExchange = ExchangeCode.UNKNOWN;
    private SecurityIDSource _securityIdSrc = SecurityIDSource.ExchangeSymbol;

    public void setSecurityIdSrc( final SecurityIDSource securityIdSrc ) {
        _securityIdSrc = securityIdSrc;
    }

    public void setSecurityExchange( final ExchangeCode securityExchange ) {
        _securityExchange = securityExchange;
    }

    @Override
    public final int parseHeader( final byte[] msg, final int offset, final int bytesRead ) {

        if ( _debug ) _dump.reset();

        _binaryMsg = msg;
        _maxIdx = bytesRead + offset; // temp assign maxIdx to last data bytes in bufferMap
        _offset = offset;
        _builder.start( msg, offset, _maxIdx );

        if ( bytesRead < 10 ) {
            ReusableString copy = TLC.instance().getString();
            if ( bytesRead == 0 )  {
                copy.setValue( "{empty}" );
            } else{
                copy.setValue( msg, offset, bytesRead );
            }
            throw new RuntimeDecodingException( "Millenium Messsage too small, len=" + bytesRead, copy );
        } else if ( msg.length < _maxIdx ){
            throwDecodeException( "Buffer too small for specified bytesRead=" + bytesRead + ",offset=" + offset + ", bufLen=" + msg.length );
        }

        _timestampMS = _builder.decodeTimestampLocal() / 1000;

        _msgType = _builder.decodeByte();

        return bytesRead;
    }

    private long genTimestamp( final long microseconds ) {
        return _tzCalculator.localMSFromMidnightToInternalTimeToday( _timestampMS );
    }

    private void procExecId( PitchBookOrderExecutedImpl msg ) {
        msg.setExecId( _builder.decodeBase36Number( 12 ) );
    }

