# PROPERTIES
# components can only reference other components defined before them
# app must be run with -Dapp.propertyTags=com.rr.core.algo.base.StratProps
#
# format for COMPONENT property identifiers is 
# component.{componentId}.[className|loader]  
# component.{componentId}.properties.{propertyName}
# where componentId and propertyName must be a single string with no periods  
# ie  c1.properties.p1.p2=XX is invalid
#
# example of arguments for constructor, default type is String
# type can be   ref|long|int|string|zstring|double|[className]
# for type "ref" the value is a componentID
# arguments index must start at 1 and match constructor arg .. arg0 is reserved for the componentId
#    component.componentId2.arg.1.value=./data/strats/bse/secdef.t1.dat
#    component.componentId2.arg.2.type=int
#    component.componentId2.arg.2.value=99
#
# example for argument as array of specified type
#    component.bookSrcMgr.arg.1.type=[Lcom.rr.md.book.BookSource;
#    component.bookSrcMgr.arg.1.value=mdController1, mdController2
#
# remember references will autowire assuming the componentId matches the reference in the SMTComponent/SMTLoader

app.name=HUB
app.debug=false
app.genIdPrefix=H
app.genNumIdPrefix=87
app.REC=BO

admin.jmx.html.port=8700

# expectedOrders is used to presize pools and calculate size of persistence files page sizes
run.cpuMaskFile=
run.warmUpCount=0
run.forceRemovePersistence=false

run.warmUpPortOffset=20

run.mainPriority=Main

warmup.delay=0

run.bookLevels=3

# =================================================================================
# MAPS
# map.{mapId}.keyType={className}
# map.{mapId}.valType={className}
# map.{mapId}.entry.{idx}={key}|{value}


# =================================================================================
# DEFAULT PROPERTIES

queue.default.enableSendSpinLock=${run.enableSendSpinLock}

queue.mdIn.default.defaultProperties=queue.default
queue.mdIn.default.type=${MD_IN_QUEUE_TYPE}

queue.mdIn.default.queuePresize=${MD_IN_RING_BUFFER_DEFAULT_QUEUE_SIZE}

# SESSION INSTANCE CONFIG
session.default.disableNanoStats=false
session.default.logEvents=true
session.default.logStats=true
session.default.logPojoEvents=${run.logPojoEvents}
session.default.persistThreadPriority=MemMapAllocator
session.default.dummyPersister=true
session.default.disableNanoStats=false
session.default.persistThreadPriority=MemMapAllocator
session.default.trace=${run.sessionTrace}


# SESSION SOCKET INSTANCE CONFIG
# session type FIX, MultiFIX, SocketSession, UTP
session.socket.default.localPort=0
session.socket.default.soDelayMS=0
session.socket.default.useNIO=${run.useNIO}

session.socket.hub.default.codecId=DropCopy44
session.socket.hub.default.defaultProperties=session.socket.default
session.socket.hub.default.server=true
session.socket.hub.default.isRecoverFromLoginSeqNumTooLow=true
session.socket.hub.default.heartBeatIntSecs=${EXCHANGE_HEARTBEAT_SECS}


# =================================================================================
# COMPONENTS

component.appProps.loader=com.rr.om.loaders.OMPropertiesLoader

component.exchangeManager.loader=com.rr.om.loaders.ExchangeManagerLoader
component.exchangeManager.properties.fileName=${run.exchangeXML}

component.instrumentLocator.loader=com.rr.om.loaders.FixInstrumentFileStoreLoader
component.instrumentLocator.properties.file=${inst.file}
component.instrumentLocator.properties.threadsafe=false
component.instrumentLocator.properties.rec=${app.REC}
component.instrumentLocator.properties.type=singleExchange

component.sessionManager.className=com.rr.om.session.SessionManager

component.codecFactory.loader=com.rr.om.loaders.CodecFactoryLoader

component.clientProfileManager.className=com.rr.om.client.ClientProfileManager
component.clientProfileManager.properties.useDummyProfile=true

component.warmupControl.className=com.rr.om.newmain.WarmupControl
component.warmupControl.properties.warmupCount=${WARMCOUNT} 
component.warmupControl.properties.warmUpPortOffset=${run.warmUpPortOffset}
component.warmupControl.properties.enableSendSpinLock=${run.enableSendSpinLock}


# ---------------------------------------------------------------------------------

######################
# HUB PROCESSOR      #
######################
 
component.hubInQueue1.loader=com.rr.om.loaders.QueueLoader
component.hubInQueue1.properties.defaultProperties=queue.default
component.hubInQueue1.properties.type=${HUB_QUEUE_TYPE}

component.hubInDispatcher1.className=com.rr.core.dispatch.OrigThreadedDispatcher
component.hubInDispatcher1.arg.1.type=com.rr.core.collections.MessageQueue
component.hubInDispatcher1.arg.1.value=hubInQueue1
component.hubInDispatcher1.arg.2.type=com.rr.core.utils.ThreadPriority
component.hubInDispatcher1.arg.2.value=HubProcessor

component.hubProcessor1.className=com.rr.strats.algo.hub.GuiHubProcessorAdapater
component.hubProcessor1.arg.1.type=com.rr.core.dispatch.MessageDispatcher
component.hubProcessor1.arg.1.value=hubInDispatcher1

# ---------------------------------------------------------------------------------
# HUB SESSION

component.threadHub.className=com.rr.core.thread.DualElementControlThread
component.threadHub.arg.1.type=com.rr.core.utils.ThreadPriority
component.threadHub.arg.1.value=Other

component.hubReceiver1.className=com.rr.core.session.MultiSessionThreadedReceiver
component.hubReceiver1.arg.1.type=com.rr.core.thread.ControlThread
component.hubReceiver1.arg.1.ref=threadHub

component.hubSender1.className=com.rr.core.session.MultiSessionThreadedDispatcher
component.hubSender1.arg.1.type=com.rr.core.thread.ControlThread
component.hubSender1.arg.1.ref=threadHub

component.hubSess1Config.className=com.rr.om.session.fixsocket.FixSocketConfig
component.hubSess1Config.properties.defaultProperties=session.socket.hub.default
component.hubSess1Config.properties.recycler=com.rr.model.generated.internal.events.factory.EventRecycler
component.hubSess1Config.properties.targetCompId=SMT
component.hubSess1Config.properties.hostname=127.0.0.1
component.hubSess1Config.properties.server=true
component.hubSess1Config.properties.isGapFillAllowed=true
component.hubSess1Config.properties.disconnectOnSeqGap=false
component.hubSess1Config.properties.senderCompId=HUB
component.hubSess1Config.properties.port=${HUB_PORT}

component.hubOutQueue1.loader=com.rr.om.loaders.QueueLoader
component.hubOutQueue1.properties.defaultProperties=queue.default
component.hubOutQueue1.properties.type=${HUB_QUEUE_TYPE}

component.hubProcessorRouter.className=com.rr.core.session.PassThruRouter
component.hubProcessorRouter.arg.1.type=com.rr.core.model.MessageHandler
component.hubProcessorRouter.arg.1.ref=hubProcessor1

component.hubSession1.loader=com.rr.om.loaders.MultiFixSessionLoader
component.hubSession1.properties.defaultProperties=session.default
component.hubSession1.properties.sessionDirection=DropCopy
component.hubSession1.properties.expectedOrders=${EXPECTED_ORDERS}
component.hubSession1.properties.exchangeManager=exchangeManager
component.hubSession1.properties.sessionConfig=hubSess1Config
component.hubSession1.properties.codecId=DropCopy44
component.hubSession1.properties.inboundRouter=hubProcessorRouter
component.hubSession1.properties.sessionManager=sessionManager
component.hubSession1.properties.inboundDispatcher=hubReceiver1
component.hubSession1.properties.outboundDispatcher=hubSender1
component.hubSession1.properties.queue=hubOutQueue1

# ---------------------------------------------------------------------------------
# SHARED CONTEXT
# Last component due to reference requirements
component.appContext.className=com.rr.core.algo.strats.StratContext
component.appContext.properties.exchangeManager=exchangeManager
component.appContext.properties.instrumentLocator=instrumentLocator



