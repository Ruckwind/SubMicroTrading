# PROPERTIES
# components can only reference other components defined before them
# app must be run with -Dapp.propertyTags=com.rr.core.algo.base.StratProps
#
# format for COMPONENT property identifiers is 
# component.{componentId}.[className|loader]  
# component.{componentId}.properties.{propertyName}
# where componentId and propertyName must be a single string with no periods  
# ie  c1.properties.p1.p2=XX is invalid
#
# example of arguments for constructor, default type is String
# type can be   ref|long|int|string|zstring|double|[className]
# for type "ref" the value is a componentID
# arguments index must start at 1 and match constructor arg .. arg0 is reserved for the componentId
#    component.componentId2.arg.1.value=./data/strats/bse/secdef.t1.dat
#    component.componentId2.arg.2.type=int
#    component.componentId2.arg.2.value=99
#
# example for argument as array of specified type
#    component.bookSrcMgr.arg.1.type=[Lcom.rr.md.book.BookSource;
#    component.bookSrcMgr.arg.1.value=mdController1, mdController2
#
# remember references will autowire assuming the componentId matches the reference in the SMTComponent/SMTLoader

app.debug=false

# expectedOrders is used to presize pools and calculate size of persistence files page sizes
run.cpuMaskFile=${ALGO_CPU_MASKS}
run.warmUpCount=${WARMCOUNT}
run.forceRemovePersistence=false


run.mainPriority=Main

warmup.delay=${WARMDELAY}

run.bookLevels=1

# =================================================================================
# MAPS
# map.{mapId}.keyType={className}
# map.{mapId}.valType={className}
# map.{mapId}.entry.{idx}={key}|{value}

map.algoClass.entry.1=TwoLegBuySellArb|com.rr.strats.algo.arb.twoleg.buysell.AlgoExchangeTwoLegBuySellArb
map.algoClass.entry.2=TwoLegSellBuyArb|com.rr.strats.algo.arb.twoleg.sellbuy.AlgoExchangeTwoLegSellBuyArb

map.stratClass.entry.1=TwoLegBuySellArb|com.rr.strats.algo.arb.twoleg.buysell.StratExchSpreadBuyLeg1SellLeg2Arb
map.stratClass.entry.2=TwoLegSellBuyArb|com.rr.strats.algo.arb.twoleg.sellbuy.BSESpreadSellLeg1BuyLeg2Arb

# =================================================================================
# DEFAULT PROPERTIES

queue.default.enableSendSpinLock=${run.enableSendSpinLock}

queue.mdIn.default.defaultProperties=queue.default
queue.mdIn.default.type=${MD_IN_QUEUE_TYPE}

queue.mdIn.default.queuePresize=${MD_IN_RING_BUFFER_DEFAULT_QUEUE_SIZE}


# SESSION INSTANCE CONFIG
# session type FIX, MultiFIX, SocketSession, UTP
session.default.disableNanoStats=false
session.default.logEvents=true
session.default.logStats=true
session.default.logPojoEvents=${run.logPojoEvents}
session.default.persistThreadPriority=MemMapAllocator
session.default.dummyPersister=true
session.default.disableNanoStats=false
session.default.persistThreadPriority=MemMapAllocator
session.default.trace=${run.sessionTrace}

session.up.default.defaultProperties=session.default
session.up.default.trace=true
session.up.default.logEvents=true
session.up.default.logPojoEvents=true
session.up.default.codecId=MDBSE
session.up.default.rec=BO

session.down.default.defaultProperties=session.default

# SESSION SOCKET INSTANCE CONFIG
# session type FIX, MultiFIX, SocketSession, UTP
session.socket.default.localPort=0
session.socket.default.soDelayMS=0
session.socket.default.useNIO=${run.useNIO}

session.socket.down.default.defaultProperties=session.socket.default
session.socket.down.default.server=false
session.socket.down.default.isRecoverFromLoginSeqNumTooLow=true
session.socket.down.default.heartBeatIntSecs=${EXCHANGE_HEARTBEAT_SECS}

session.socket.up.default.defaultProperties=session.socket.default
session.socket.up.default.server=false
session.socket.up.default.recycler=com.rr.model.generated.internal.events.factory.EventRecycler
session.socket.up.default.localPort=0
session.socket.up.default.hostname=localhost
session.socket.up.default.disableLoopback=true
session.socket.up.default.multicast=true

session.up.md.default.defaultProperties=session.up.default
session.up.md.default.templateFile=../data/bse/common/EMDIFastTemplates-1.1.xml
session.up.md.default.codecId=MDBSE
session.up.md.default.rec=BO


# =================================================================================
# COMPONENTS

component.appProps.loader=com.rr.om.loaders.OMPropertiesLoader

component.exchangeManager.loader=com.rr.om.loaders.ExchangeManagerLoader
component.exchangeManager.properties.fileName=${run.exchangeXML}


component.sessionManager.className=com.rr.om.session.SessionManager

component.codecFactory.loader=com.rr.om.loaders.CodecFactoryLoader

component.clientProfileManager.className=com.rr.om.client.ClientProfileManager
component.clientProfileManager.properties.useDummyProfile=true

component.warmupControl.className=com.rr.om.newmain.WarmupControl
component.warmupControl.properties.warmupCount=${WARMCOUNT} 
component.warmupControl.properties.warmUpPortOffset=${run.warmUpPortOffset}
component.warmupControl.properties.enableSendSpinLock=${run.enableSendSpinLock}

# ---------------------------------------------------------------------------------
# Shared Components that dont belong in AppContext

# define the router to the exchange session that will route back to indiv strat handlers
# routerSharedData holds the route back for execs to appropriate algo exchange handler instance
component.routerSharedData.className=com.rr.core.algo.router.RouterSharedData
component.routerSharedData.arg.1.type=int
component.routerSharedData.arg.1.value=${EXPECTED_ORDERS}

# ---------------------------------------------------------------------------------
# HUB SESSION

source ./config/strats/bse/parts/loggingHubSession.properties
#include ./config/strats/bse/parts/hubClient.properties



# ---------------------------------------------------------------------------------
# EXCHANGE SESSIONS

component.inboundMktRouter.className=com.rr.core.algo.router.MultiSourceFromExchangeRouter
component.inboundMktRouter.arg.1.type=com.rr.core.model.MessageHandler
component.inboundMktRouter.arg.1.ref=hubSession1
component.inboundMktRouter.arg.2.ref=routerSharedData

source ./config/strats/bse/parts/bseETISession.properties


# router used by algos to send orders to exchange
component.exchangeRouter.className=com.rr.core.algo.router.MultiSourceToSingleExchangeRouter
component.exchangeRouter.arg.1.type=com.rr.core.model.MessageHandler
component.exchangeRouter.arg.1.ref=exchangeSession1
component.exchangeRouter.arg.2.ref=routerSharedData

