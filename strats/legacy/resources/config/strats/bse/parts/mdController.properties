# IDX=1  PIPES=P1  TYPE=CD  MAX_PROD_GRP_ARRAY=32
# IDX=2  PIPES=P5  TYPE=ED  MAX_PROD_GRP_ARRAY=1000


#################
# MD Controller #
#################

# MarketDataController 
# market data events placed in market data controller queue
# queue is read and events invoked on the market data controller by its inbound dispatcher (which will be async on its own thread)
component.mdCtlInQueue%{IDX}.loader=com.rr.om.loaders.QueueLoader
component.mdCtlInQueue%{IDX}.properties.defaultProperties=queue.mdIn.default

component.mdInDispatcher%{IDX}.className=com.rr.core.dispatch.OrigThreadedDispatcher
component.mdInDispatcher%{IDX}.arg.1.type=com.rr.core.collections.MessageQueue
component.mdInDispatcher%{IDX}.arg.1.value=mdCtlInQueue%{IDX}
component.mdInDispatcher%{IDX}.arg.2.type=com.rr.core.utils.ThreadPriority
component.mdInDispatcher%{IDX}.arg.2.value=Controller%{IDX}

component.mdController%{IDX}.loader=com.rr.core.algo.loaders.BSEMarketDataControllerLoader
component.mdController%{IDX}.properties.debug=${CONTROLLER_TRACE}
component.mdController%{IDX}.properties.pipeIdList=%{PIPES}
component.mdController%{IDX}.properties.bookLevels=5
component.mdController%{IDX}.properties.inboundDispatcher=mdInDispatcher%{IDX}
component.mdController%{IDX}.properties.instrumentStore=instrumentLocator%{TYPE}
component.mdController%{IDX}.properties.maxProdGrpArraySize=%{MAX_PROD_GRP_ARRAY}
component.mdController%{IDX}.properties.rec=${app.REC}
component.mdController%{IDX}.properties.overrideSubscribeSet=true
   # RECOVERY PROPERTIES
   # if enqueueIncUpdatesOnGap is true then when product message sequence gap detected enqueue out of sequence packets and wait for in sequence recovery
component.mdController%{IDX}.properties.enqueueIncUpdatesOnGap=true
component.mdController%{IDX}.properties.maxEnqueueIncUpdatesOnGap=30
   # disableDirtyAllBooksOnPacketGap if true will disable the mark books dirty when packet gap detected
component.mdController%{IDX}.properties.disableDirtyAllBooksOnPacketGap=true
   # ignoreDirtyOnGap if true will not mark book dirty when gap detected
component.mdController%{IDX}.properties.ignoreDirtyOnGap=false




