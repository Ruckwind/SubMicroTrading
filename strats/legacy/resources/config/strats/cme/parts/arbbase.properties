# PROPERTIES
# components can only reference other components defined before them
# app must be run with -Dapp.propertyTags=com.rr.core.algo.base.StratProps
#
# format for COMPONENT property identifiers is 
# component.{componentId}.[className|loader]  
# component.{componentId}.properties.{propertyName}
# where componentId and propertyName must be a single string with no periods  
# ie  c1.properties.p1.p2=XX is invalid
#
# example of arguments for constructor, default type is String
# type can be   ref|long|int|string|zstring|double|[className]
# for type "ref" the value is a componentID
# arguments index must start at 1 and match constructor arg .. arg0 is reserved for the componentId
#    component.componentId2.arg.1.value=./data/strats/cme/secdef.t1.dat
#    component.componentId2.arg.2.type=int
#    component.componentId2.arg.2.value=99
#
# example for argument as array of specified type
#    component.bookSrcMgr.arg.1.type=[Lcom.rr.md.book.BookSource;
#    component.bookSrcMgr.arg.1.value=mdController1, mdController2
#
# remember references will autowire assuming the componentId matches the reference in the SMTComponent/SMTLoader

app.debug=false

# expectedOrders is used to presize pools and calculate size of persistence files page sizes
run.cpuMaskFile=${ALGO_CPU_MASKS}
run.warmUpCount=${WARMCOUNT}
run.forceRemovePersistence=false


run.mainPriority=Main

warmup.delay=${WARMDELAY}

run.bookLevels=1

# =================================================================================
# MAPS
# map.{mapId}.keyType={className}
# map.{mapId}.valType={className}
# map.{mapId}.entry.{idx}={key}|{value}

map.algoClass.entry.1=TwoLegBuySellArb|com.rr.strats.algo.arb.twoleg.buysell.AlgoExchangeTwoLegBuySellArb
map.algoClass.entry.2=TwoLegSellBuyArb|com.rr.strats.algo.arb.twoleg.sellbuy.AlgoExchangeTwoLegSellBuyArb

map.stratClass.entry.1=TwoLegBuySellArb|com.rr.strats.algo.arb.twoleg.buysell.StratExchSpreadBuyLeg1SellLeg2Arb
map.stratClass.entry.2=TwoLegSellBuyArb|com.rr.strats.algo.arb.twoleg.sellbuy.StratExchSpreadSellLeg1BuyLeg2Arb

# =================================================================================
# DEFAULT PROPERTIES

queue.default.enableSendSpinLock=${run.enableSendSpinLock}

queue.mdIn.default.defaultProperties=queue.default
queue.mdIn.default.type=${MD_IN_QUEUE_TYPE}

queue.mdIn.default.queuePresize=${MD_IN_RING_BUFFER_DEFAULT_QUEUE_SIZE}


# SESSION INSTANCE CONFIG
# session type FIX, MultiFIX, SocketSession, UTP
session.default.disableNanoStats=false
session.default.logEvents=true
session.default.logStats=true
session.default.logPojoEvents=${run.logPojoEvents}
session.default.persistThreadPriority=MemMapAllocator
session.default.dummyPersister=true
session.default.disableNanoStats=false
session.default.persistThreadPriority=MemMapAllocator
session.default.trace=${run.sessionTrace}

session.down.default.defaultProperties=session.default

# SESSION SOCKET INSTANCE CONFIG
# session type FIX, MultiFIX, SocketSession, UTP
session.socket.default.localPort=0
session.socket.default.soDelayMS=0
session.socket.default.useNIO=${run.useNIO}

session.socket.up.default.defaultProperties=session.socket.default
session.socket.up.default.server=false

session.socket.down.default.codecId=Standard44
session.socket.down.default.defaultProperties=session.socket.default
session.socket.down.default.server=false
session.socket.down.default.isRecoverFromLoginSeqNumTooLow=true
session.socket.down.default.heartBeatIntSecs=${EXCHANGE_HEARTBEAT_SECS}


# =================================================================================
# COMPONENTS

component.appProps.loader=com.rr.om.loaders.OMPropertiesLoader

component.exchangeManager.loader=com.rr.om.loaders.ExchangeManagerLoader
component.exchangeManager.properties.fileName=${run.exchangeXML}

component.instrumentLocator.loader=com.rr.om.loaders.FixInstrumentFileStoreLoader
component.instrumentLocator.properties.file=${inst.file}
component.instrumentLocator.properties.threadsafe=false
component.instrumentLocator.properties.rec=${app.REC}
component.instrumentLocator.properties.type=singleExchange

component.sessionManager.className=com.rr.om.session.SessionManager

component.cmeConfig.loader=com.rr.md.us.cme.XMLCMEConfigLoader
component.cmeConfig.properties.configFile=./data/strats/cme/config.xml

component.codecFactory.loader=com.rr.om.loaders.CodecFactoryLoader

component.clientProfileManager.className=com.rr.om.client.ClientProfileManager
component.clientProfileManager.properties.useDummyProfile=true

component.warmupControl.className=com.rr.om.newmain.WarmupControl
component.warmupControl.properties.warmupCount=${WARMCOUNT} 
component.warmupControl.properties.warmUpPortOffset=${run.warmUpPortOffset}
component.warmupControl.properties.enableSendSpinLock=${run.enableSendSpinLock}

# ---------------------------------------------------------------------------------
# Shared Components that dont belong in AppContext

# define the router to the exchange session that will route back to indiv strat handlers
# routerSharedData holds the route back for execs to appropriate algo exchange handler instance
component.routerSharedData.className=com.rr.core.algo.router.RouterSharedData
component.routerSharedData.arg.1.type=int
component.routerSharedData.arg.1.value=${EXPECTED_ORDERS}

# ---------------------------------------------------------------------------------
# HUB SESSION

source ./config/strats/cme/parts/loggingHubSession.properties
#include ./config/strats/cme/parts/hubClient.properties

# ---------------------------------------------------------------------------------
# EXCHANGE SESSIONS


component.inboundMktRouter.className=com.rr.core.algo.router.MultiSourceFromExchangeRouter
component.inboundMktRouter.arg.1.type=com.rr.core.model.MessageHandler
component.inboundMktRouter.arg.1.ref=hubSession1
component.inboundMktRouter.arg.2.ref=routerSharedData


# OUTBOUND TRADING SESSION (currently 1 control thread shared used for SEND and RECEIVE
# remember the send/receivers can use different thread controllers

component.threadExchange.className=com.rr.core.thread.DualElementControlThread
component.threadExchange.arg.1.type=com.rr.core.utils.ThreadPriority
component.threadExchange.arg.1.value=SessionOutbound2

component.exchangeReceiver1.className=com.rr.core.session.MultiSessionThreadedReceiver
component.exchangeReceiver1.arg.1.type=com.rr.core.thread.ControlThread
component.exchangeReceiver1.arg.1.ref=threadExchange

component.exchangeSender1.className=com.rr.core.session.MultiSessionThreadedDispatcher
component.exchangeSender1.arg.1.type=com.rr.core.thread.ControlThread
component.exchangeSender1.arg.1.ref=threadExchange

component.exSess1Config.className=com.rr.om.session.fixsocket.FixSocketConfig
component.exSess1Config.properties.defaultProperties=session.socket.down.default
component.exSess1Config.properties.recycler=com.rr.model.generated.internal.events.factory.EventRecycler
component.exSess1Config.properties.maxMsgsPerSecond=${THROTTLE_EXCHANGE_MSGS_PER_SECOND}
component.exSess1Config.properties.maxResendRequestSize=2500
component.exSess1Config.properties.throttlerClass=com.rr.om.utils.OMThrottler
component.exSess1Config.properties.targetCompId=CME
component.exSess1Config.properties.encryptMethod=0
component.exSess1Config.properties.senderLocationID=${CME_SENDER_LOCATION_ID}
component.exSess1Config.properties.senderSubId=${CME_SENDER_SUBID}
component.exSess1Config.properties.targetSubId=${CME_TARGET_SUBID}
component.exSess1Config.properties.hostname=${CME_HOST}
component.exSess1Config.properties.isGapFillAllowed=true
component.exSess1Config.properties.disconnectOnSeqGap=false
component.exSess1Config.properties.senderCompId=${CME_SENDER_COMPID}
component.exSess1Config.properties.rawData=${CME_RAW_DATA}
component.exSess1Config.properties.port=${CME_PORT}
component.exSess1Config.properties.localPort=0
component.exSess1Config.properties.nic=${OM_EXCHANGE_NIC}

component.exOutQueue1.loader=com.rr.om.loaders.QueueLoader
component.exOutQueue1.properties.defaultProperties=queue.default
component.exOutQueue1.properties.type=${EX_OUT_QUEUE_TYPE}
component.exOutQueue1.properties.queuePresize=${EX_OUT_RING_BUFFER_DEFAULT_QUEUE_SIZE}

component.exchangeSession1.loader=com.rr.om.loaders.MultiFixSessionLoader
component.exchangeSession1.properties.defaultProperties=session.down.default
component.exchangeSession1.properties.expectedOrders=${EXPECTED_ORDERS}
component.exchangeSession1.properties.exchangeManager=exchangeManager
component.exchangeSession1.properties.sessionConfig=exSess1Config
component.exchangeSession1.properties.codecId=CME
component.exchangeSession1.properties.rec=${app.REC}
component.exchangeSession1.properties.hubSession=hubSession1
component.exchangeSession1.properties.inboundRouter=inboundMktRouter
component.exchangeSession1.properties.sessionManager=sessionManager
component.exchangeSession1.properties.inboundDispatcher=exchangeReceiver1
component.exchangeSession1.properties.outboundDispatcher=exchangeSender1
component.exchangeSession1.properties.queue=exOutQueue1


# router used by algos to send orders to exchange
component.exchangeRouter.className=com.rr.core.algo.router.MultiSourceToSingleExchangeRouter
component.exchangeRouter.arg.1.type=com.rr.core.model.MessageHandler
component.exchangeRouter.arg.1.ref=exchangeSession1
component.exchangeRouter.arg.2.ref=routerSharedData


# ---------------------------------------------------------------------------------

######################
# MD SESSION THREADS #
######################
 
source ./config/strats/cme/parts/marketDataMultiplexor.properties  ID=mktDataReceiver1  THREAD_PRI=DataIn1  PIPES=P1,P2,P3
source ./config/strats/cme/parts/marketDataMultiplexor.properties  ID=mktDataReceiver2  THREAD_PRI=DataIn2  PIPES=P4,P5,P6
 
source ./config/strats/cme/parts/marketDataMultiplexor.properties  ID=mktDataReceiver3  THREAD_PRI=DataIn3  PIPES=P7,P8,P9
source ./config/strats/cme/parts/marketDataMultiplexor.properties  ID=mktDataReceiver4  THREAD_PRI=DataIn4  PIPES=P10,P11,P12

######################
# MD SESSION BUILDER #
######################

component.baseMDSocketConfig.className=com.rr.md.fastfix.FastSocketConfig
component.baseMDSocketConfig.properties.defaultProperties=session.socket.up.default
component.baseMDSocketConfig.properties.recycler=com.rr.model.generated.internal.events.factory.EventRecycler
component.baseMDSocketConfig.properties.localPort=0

component.mdSessBuilder.className=com.rr.md.us.cme.builder.CMEOnDemandFastFixSessionBuilder
component.mdSessBuilder.arg.1.ref=cmeConfig
component.mdSessBuilder.arg.2.ref=sessionManager
component.mdSessBuilder.arg.3.type=[Lcom.rr.core.session.MultiSessionThreadedReceiver;
component.mdSessBuilder.arg.3.value=mktDataReceiver1, mktDataReceiver2, mktDataReceiver3, mktDataReceiver4 
component.mdSessBuilder.arg.4.type=com.rr.core.session.socket.SocketConfig
component.mdSessBuilder.arg.4.ref=baseMDSocketConfig
component.mdSessBuilder.arg.5.value=${OM_MD_NIC_A}, ${OM_MD_NIC_B}
component.mdSessBuilder.properties.addInstrumentSessions=false
component.mdSessBuilder.properties.addSnapshotSessions=true
component.mdSessBuilder.properties.trace=false
component.mdSessBuilder.properties.enableEventPojoLogging=false
component.mdSessBuilder.properties.subChannelMask=-1
component.mdSessBuilder.properties.logEvents=false
component.mdSessBuilder.properties.templateFile=data/strats/cme/templates.xml


##################
# MD ControllerS #
##################

source ./config/strats/cme/parts/mdController.properties  ID=mdController1  THREAD_PRI=Controller1  PIPES=P1,P2,P3,P4,P5,P6
source ./config/strats/cme/parts/mdController.properties  ID=mdController2  THREAD_PRI=Controller2  PIPES=P7,P8,P9,P10,P11,P12


#######################
# BOOK SOURCE MANAGER #
#######################

# BookSourceManager takes comma delimited list for constructor arg1 .. note type first char is '[' denotes array
component.bookSrcMgr.className=com.rr.md.book.BookSourceManager
component.bookSrcMgr.arg.1.type=[Lcom.rr.md.book.BookSource;
component.bookSrcMgr.arg.1.value=mdController1, mdController2
component.bookSrcMgr.properties.mdSessionBuilder=mdSessBuilder

